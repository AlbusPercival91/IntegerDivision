name: Label Blocked Issues

permissions:
  contents: read
  issues: write

on:
  issues:
    types: [ opened, edited, reopened, closed ]

jobs:
  label-blocked-issues:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Check Rate Limit
        id: rate_limit
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/rate_limit")
          remaining=$(echo "$response" | jq .rate.remaining)
          reset=$(echo "$response" | jq .rate.reset)
          echo "remaining=$remaining" >> $GITHUB_ENV
          echo "reset=$reset" >> $GITHUB_ENV

      - name: Find and Label Blocked Issues
        if: ${{ env.remaining }} > 10
        id: find-blocked-issues
        run: |
          issue_body=$(jq -r .issue.body $GITHUB_EVENT_PATH)
          dependencies=$(echo "$issue_body" | grep -oP "(?<=^|\s)#\d+(?=\s|$)" | sed 's/#//g' || true)
          found_blocked=false
          errors=()

          for issue in $dependencies; do
            status=$(curl -s -w "%{http_code}" -X GET \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$issue")
            http_status=$(tail -n1 <<< "$status")
            body=$(head -n-1 <<< "$status")

            if [[ "$http_status" != "200" ]]; then
              echo "HTTP Status: $http_status, Error fetching status for issue #$issue"
              errors+=("Error fetching status for issue #$issue")
              continue
            fi

            status=$(echo "$body" | jq -r .state)

            if [ "$status" != "closed" ]; then
              echo "Issue #$issue is still open"
              found_blocked=true

              # Label the dependent issue as blocked
              echo "Labeling dependent issue #$issue as blocked..."
              response=$(curl -s -w "%{http_code}" -X POST \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -d '{"labels": ["blocked"]}' \
                "https://api.github.com/repos/${{ github.repository }}/issues/$issue/labels")
              http_status=$(tail -n1 <<< "$response")

              if ! [[ "$http_status" =~ ^2 ]]; then
                echo "Failed to add 'blocked' label to dependent issue #$issue: HTTP $http_status"
                exit 1
              fi
            fi
          done

          if [ ${#errors[@]} -ne 0 ]; then
            printf '%s\n' "${errors[@]}"
            exit 1
          fi

          if [[ "$found_blocked" == true ]]; then
            echo "The script has determined that the issue is blocked."
            echo "blocked=true" >> $GITHUB_ENV
          else
            echo "All dependencies are closed. No 'blocked' label needed."
            echo "blocked=false" >> $GITHUB_ENV
          fi

      - name: Label or Unlabel Issue as Blocked
        if: ${{ env.blocked == 'true' }}
        run: |
          echo "Labeling or Unlabeling issue as blocked..."
          echo "GitHub Repository: ${{ github.repository }}"
          echo "Issue Number: ${{ github.event.issue.number }}"

          # Check if the triggering issue is open
          status=$(curl -s -w "%{http_code}" -X GET \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}")
          http_status=$(tail -n1 <<< "$status")
          body=$(head -n-1 <<< "$status")

          if [[ "$http_status" != "200" ]]; then
            echo "HTTP Status: $http_status, Error fetching status for triggering issue"
            exit 1
          fi

          status=$(echo "$body" | jq -r .state)

          if [ "$status" != "closed" ]; then
            # Label the triggering issue as blocked
            echo "Labeling issue as blocked..."
            curl -s -w "%{http_code}" -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"labels": ["blocked"]}' \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/labels"
          else
            # Unlabel the dependent issues if the triggering issue is closed
            echo "Removing 'blocked' label from dependent issues..."
            dependent_issues=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" | jq -r '.[] | select(.body | test("#[0-9]+")) | .body | match("#[0-9]+") | .string')

            for dependent_issue in $dependent_issues; do
              dependent_issue_number=$(echo "$dependent_issue" | sed 's/#//g')

              # Check if the dependent issue is open
              status=$(curl -s -w "%{http_code}" -X GET \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$dependent_issue_number")
              http_status=$(tail -n1 <<< "$status")
              body=$(head -n-1 <<< "$status")

              if [[ "$http_status" != "200" ]]; then
                echo "HTTP Status: $http_status, Error fetching status for dependent issue #$dependent_issue_number"
                exit 1
              fi

              status=$(echo "$body" | jq -r .state)

              if [ "$status" != "closed" ]; then
                echo "Removing 'blocked' label from dependent issue #$dependent_issue_number..."
                curl -s -w "%{http_code}" -X DELETE \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$dependent_issue_number/labels/blocked"
              else
                echo "'Blocked' label was not present on dependent issue #$dependent_issue_number."
              fi
            done
          fi
      
